# -*- coding: utf-8 -*-
"""week8_track2_conversational_viz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLtTdwEMBBtbaWpPwS8AIi9ykAmT-bw-

# Week 8 — Track 2: Conversational Data Visualization with LLM Guidance
Natural language → data query/transform → matplotlib chart (no seaborn).
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
print('Pandas/Matplotlib imported.')

"""## 1) Load a sample dataset (replace with your project CSV)"""

df = pd.read_csv("medical_summary_agent_metrics.csv")
print("✅ Dataset loaded successfully!")
display(df)

"""## 2) NL → plot spec (template)"""

def nl_to_plot_spec(nl: str):
    nl = nl.lower()
    if 'metric a' in nl and 'year' in nl:
        return {'x':'year','y':'metric_a','kind':'line','title':'Metric A over Year'}
    if 'metric b' in nl and 'year' in nl:
        return {'x':'year','y':'metric_b','kind':'line','title':'Metric B over Year'}
    return {'x':'year','y':'metric_a','kind':'line','title':'Metric A over Year (default)'}
print(nl_to_plot_spec('plot metric a by year'))

def parse_query(query, df_columns):
    q = query.lower()
    x, y = None, None

    # Common x-axis hints
    for axis_candidate in ["summary_date", "agent_version", "disease_type", "case_id"]:
        if axis_candidate in q and axis_candidate in df_columns:
            x = axis_candidate
            break

    # Possible y-axis metrics
    for col in df_columns:
        if col in q and col != x:
            y = col
            break

    return {"x": x, "y": y}

import matplotlib.pyplot as plt

def generate_plot(query, df):
    spec = parse_query(query, df.columns)
    x, y = spec["x"], spec["y"]

    if not x or not y:
        print(f"⚠️ Could not infer x/y for: '{query}'")
        return

    if x not in df.columns or y not in df.columns:
        print(f"⚠️ Invalid columns detected for '{query}'")
        return

    plt.figure(figsize=(8,5))
    plt.plot(df[x], df[y])
    plt.xlabel(x.title())
    plt.ylabel(y.title())
    plt.title(f"{y.title()} vs {x.title()}")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.show()

    print(f"✅ Query: '{query}' → x='{x}', y='{y}'")

queries = [
    "plot trust_score by summary_date",
    "show latency_ms trend by agent_version",
    "compare evidence_coverage by disease_type"
]

for q in queries:
    generate_plot(q, df)

